spring.application.name=user-service
server.port=8100

## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.url = jdbc:mysql://localhost:3306/user-service_db?useSSL=false
spring.datasource.username = root
spring.datasource.password = root

spring.datasource.driverClassName=com.mysql.jdbc.Driver

## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update

# izgleda kao da je rjesilo feign timeout
feign.hystrix.enabled=false  

#server.ssl.key-alias=selfsigned_localhost_sslserver
server.ssl.key-alias=localhost
server.ssl.key-password=changeit
server.ssl.key-store=classpath:ssl-server.jks
server.ssl.key-store-provider=SUN
server.ssl.key-store-type=JKS

# Tell Spring Security (if used) to require requests over HTTPS
eureka.client.service-url.defaultZone=https://localhost:8761/eureka/
#server.ssl.enabled=true

# The format used for the keystore 
#server.ssl.key-store-type=PKCS12
# The path to the keystore containing the certificate
#server.ssl.key-store=classpath:keystore.p12
# The password used to generate the certificate
#server.ssl.key-store-password=1Dvatri!
# The alias mapped to the certificate
#server.ssl.key-alias=tomcat
#server.ssl.client-auth=want
#server.ssl.trust-store=classpath:keystore.p12

eureka.instance.non-secure-port-enabled=false
eureka.instance.secure-port-enabled=true
eureka.instance.secure-port=${server.port}
eureka.instance.hostname=localhost
#eureka.instance.status-page-url='https://${eureka.instance.hostname}:${eureka.instance.secure-port}/info'
#eureka.instance.health-check-url='https://${eureka.instance.hostname}:${server.port}/health'
#eureka.instance.home-page-url='https://${eureka.instance.hostname}:${server.port}/'
eureka.instance.secure-virtual-host-name=${spring.application.name}

spring.mvc.dispatch-options-request=true